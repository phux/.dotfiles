---
- name: Install tmux build dependencies
  become: true
  ansible.builtin.package:
    name:
      - libevent-dev
      - libtool
      - autotools-dev
      - automake
      - pkg-config
      - ncurses-dev
    state: latest

- name: Check current tmux version
  ansible.builtin.shell: "tmux -V | awk '{print $2}' || echo 'not found'"
  register: current_tmux_version
  changed_when: false
  ignore_errors: true

- name: Clone tmux repository
  ansible.builtin.git:
    repo: https://github.com/tmux/tmux.git
    dest: "{{ ansible_env.HOME }}/tools/tmux"
    version: "{{ tmux_version | replace('v', '') }}"
    accept_hostkey: true
  when: current_tmux_version.stdout | trim != (tmux_version | replace('v', ''))

- name: Install tmux
  become: true
  ansible.builtin.shell: |
    cd {{ ansible_env.HOME }}/tools/tmux
    git pull
    sh autogen.sh
    ./configure
    make
    make install
  when: current_tmux_version.stdout | trim != (tmux_version | replace('v', ''))

- name: Symlink tmux to ~/.local/bin/
  ansible.builtin.file:
    src: /usr/local/bin/tmux
    dest: "{{ ansible_env.HOME }}/.local/bin/tmux"
    state: link

- name: Link .tmux.conf
  ansible.builtin.file:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}/.{{ item | basename }}"
    state: link
  with_fileglob:
    - tmux.*

- name: Check if tpm is cloned
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
  register: tpm_cloned

- name: Clone tpm repository
  ansible.builtin.git:
    repo: https://github.com/tmux-plugins/tpm
    dest: "{{ ansible_env.HOME }}/.tmux/plugins/tpm"
    version: "{{ tpm_version }}"
    accept_hostkey: true
  when: not tpm_cloned.stat.exists

- name: Fetch latest changes for tpm
  ansible.builtin.shell: |
    cd {{ ansible_env.HOME }}/.tmux/plugins/tpm && git fetch origin
  args:
    executable: /bin/bash
  changed_when: false
  when: tpm_cloned.stat.exists

- name: Check if tpm needs update
  ansible.builtin.shell: |
    cd {{ ansible_env.HOME }}/.tmux/plugins/tpm && git rev-parse HEAD
  register: local_tpm_head
  changed_when: false
  when: tpm_cloned.stat.exists

- name: Check remote tpm head
  ansible.builtin.shell: |
    cd {{ ansible_env.HOME }}/.tmux/plugins/tpm && git rev-parse origin/master
  register: remote_tpm_head
  changed_when: false
  when: tpm_cloned.stat.exists

- name: Update tpm
  ansible.builtin.shell: |
    cd {{ ansible_env.HOME }}/.tmux/plugins/tpm
    git pull
  when: tpm_cloned.stat.exists and local_tpm_head.stdout != remote_tpm_head.stdout

- name: Link tmux files
  ansible.builtin.file:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}/.tmux/{{ item | basename }}"
    state: link
  with_fileglob:
    - mux.sh

- name: Update tmux plugins
  ansible.builtin.shell: |
    source ~/.config/zsh/.zshrc
    ~/.tmux/plugins/tpm/bin/update_plugins all
  args:
    executable: /bin/zsh

- name: Install tmuxinator
  ansible.builtin.shell: "{{ ansible_env.HOME }}/.rbenv/bin/rbenv exec gem install tmuxinator"
  become: true
  args:
    creates: "{{ ansible_env.HOME }}/.rbenv/shims/tmuxinator"
