global !p
def get_pkg_name():
	return os.path.basename(os.path.dirname(path))
endglobal

snippet dt
"2006-01-02T15:04:05.000Z"
endsnippet

snippet desc "Describe Ginkgo"
Describe("$1", func() {$0})
endsnippet

snippet ct "Context Ginkgo"
Context("$1", func() {$0})
endsnippet

snippet it "It Ginkgo"
It("$1", func() {$0})
endsnippet

snippet be "BeforeEach Gomega/Ginkgo"
BeforeEach(func() {
$0
})
endsnippet

snippet ex "Expect().To(Equal()) Gomega"
Expect($1).To(Equal($2))
endsnippet

snippet ginkgo "ginkgo skeleton"
import (
	"testing"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

func Test$1(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "$1 Suite")
}

var _ = Describe("$1", func() {})
endsnippet

snippet key_set "if ok"
if ${3:val}, ok := ${1:dict}[${2:key}]; ok {
    $0
}
endsnippet

snippet key_notset "if !ok"
if ${3:val}, ok := ${1:dict}[${2:key}]; !ok {
    $0
}
endsnippet

snippet m "Method"
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet ane "assert.NoError"
assert.NoError(t, ${1:err})$0
endsnippet

snippet ae "assert.Equal"
assert.Equal(t, ${1:expected}, ${2:actual})$0
endsnippet


snippet ae "assert.Equal"
assert.Equal(t, ${1:expected}, ${2:actual})$0
endsnippet

global !p
def get_pkg_name():
	return os.path.basename(os.path.dirname(path))
endglobal

snippet pk "insert pkg name for current dir"
package `!p snip.rv = get_pkg_name()`
$0
endsnippet

snippet construct ""
func New$1() $1{
	return $1{
		$0
	}
}
endsnippet

snippet errorStruct "declare custom error struct"
type ${1:Name}Error struct {
	msg string
}

func (e *$1Error) Error() string {
	return e.msg
}$0
endsnippet

snippet ew "errors.Wrap()"
errors.Wrap(err, "$1")$0
endsnippet

snippet ref "return fmt.Errorf"
return ${1:$2, }fmt.Errorf("$3", $4)
endsnippet
